/*
 * This file is part of JAtm - The Jupiter Ace tape manager.
 *
 * JAtm is a tool to manage Jupiter Ace tape files in several formats.
 * Copyright (C) 2015  Ricardo Fernandes Lopes
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package JatmUI;

import Jatm.JaTape;

public class ViewInfoDialog extends javax.swing.JDialog {
    
    private final JaTape tapeFile;
    private final byte[] data;
    private final int address;
    private final int size;
    
    /**
     * Creates new form HexViewDialog
     * @param parent
     * @param modal
     * @param t
     */
    public ViewInfoDialog(java.awt.Frame parent, boolean modal, JaTape t) {
        super(parent, modal);
        
        tapeFile = t;
        data = tapeFile.getData();
        address = tapeFile.getParameter(JaTape.ADDRESS);
        size = data.length;
        
        initComponents();

        this.setTitle("Info [" + tapeFile.getFilename() + "]" );

        showFileInfo();
        showHexDump();
    }
    
    // Print Info tab Contents
    private void showFileInfo() {
        if (tapeFile.isDict()) {
            InfoTextArea.append("Dict: ");
        } else {
            InfoTextArea.append("Byt: ");
        }
        InfoTextArea.append(tapeFile.getFilename() + " ( "
            + tapeFile.getParameter(JaTape.LENGTH) + " bytes "
            + String.format("at %04Xh )", tapeFile.getParameter(JaTape.ADDRESS)) + "\n\n");
        InfoTextArea.append("   Word Link: " + String.format("%04Xh", tapeFile.getParameter(JaTape.CURR_WRD)) + "\n");
        InfoTextArea.append("     CURRENT: " + String.format("%04Xh", tapeFile.getParameter(JaTape.CURRENT)) + "\n");
        InfoTextArea.append("     CONTEXT: " + String.format("%04Xh", tapeFile.getParameter(JaTape.CONTEXT)) + "\n");
        InfoTextArea.append("    Voc Link: " + String.format("%04Xh", tapeFile.getParameter(JaTape.VOCLNK)) + "\n");
        InfoTextArea.append("Stack Bottom: " + String.format("%04Xh", tapeFile.getParameter(JaTape.STKBOT)) + "\n");
    }
    
    // print Hex tab content
    private void showHexDump() {
        StringBuilder sbHex = new StringBuilder(); // Hex values buffer
        StringBuilder sbAsc = new StringBuilder(); // ascii chars buffer
        HexTextArea.append("                           HEX                               ASCII\n");  
        HexTextArea.append("ADRS  -----------------------------------------------   ----------------\n");      
        // 16 bytes per line
        int adr = address;
        for(int i = 0; i < data.length; i=i+16) {
            sbHex.setLength(0); // Clear Hex values string buffer
            sbAsc.setLength(0); // Clear Ascii chars string buffer
            sbHex.append(String.format("%04X:", adr)); // Address
            sbAsc.append("   "); // Ascii separation
            //HexTextArea.append(String.format("%04X: ", adr));
            for(int n = i; n < i+16; n++) {
                if( n < data.length) {
                    byte c = data[n];
                    sbHex.append(String.format(" %02X", c));
                    c &= 0x7F;  // convert inverse chars to ascii
                    if(data[n]>=32 && c <= 127) { // avoid control & graphic chars
                        sbAsc.append((char)c);
                    } else {
                        sbAsc.append(".");
                    }
                } else {
                    sbHex.append("   "); // Fill last line gap
                }
            }
            adr = adr + 16;
            HexTextArea.append(sbHex.toString()); // print HEx values
            HexTextArea.append(sbAsc.toString()); // print Asci chars
            HexTextArea.append("\n"); // End of Line
        }
        HexTextArea.setEditable(false);  // Avoid user editing
        HexTextArea.setCaretPosition(0); // move to top of text
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CloseButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        MapPanel = new MemMapPanel(tapeFile);
        InfoScrollPane = new javax.swing.JScrollPane();
        InfoTextArea = new javax.swing.JTextArea();
        HexScrollPane = new javax.swing.JScrollPane();
        HexTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("File Info");
        setLocationByPlatform(true);
        setPreferredSize(new java.awt.Dimension(640, 500));

        CloseButton.setMnemonic('C');
        CloseButton.setText("Close");
        CloseButton.setToolTipText("");
        CloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MapPanelLayout = new javax.swing.GroupLayout(MapPanel);
        MapPanel.setLayout(MapPanelLayout);
        MapPanelLayout.setHorizontalGroup(
            MapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 611, Short.MAX_VALUE)
        );
        MapPanelLayout.setVerticalGroup(
            MapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 288, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Memory Map", MapPanel);

        InfoTextArea.setColumns(20);
        InfoTextArea.setRows(5);
        InfoScrollPane.setViewportView(InfoTextArea);

        jTabbedPane1.addTab("Header Info", InfoScrollPane);

        HexTextArea.setColumns(20);
        HexTextArea.setRows(5);
        HexScrollPane.setViewportView(HexTextArea);

        jTabbedPane1.addTab("Hex Dump", HexScrollPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(CloseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CloseButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseButtonActionPerformed
        dispose();
    }//GEN-LAST:event_CloseButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CloseButton;
    private javax.swing.JScrollPane HexScrollPane;
    private javax.swing.JTextArea HexTextArea;
    private javax.swing.JScrollPane InfoScrollPane;
    private javax.swing.JTextArea InfoTextArea;
    private javax.swing.JPanel MapPanel;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
